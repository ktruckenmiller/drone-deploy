AWSTemplateFormatVersion: '2010-09-09'
Description: An example service
Parameters:
  VpcId:
    Type: String
  # CertId:
  #   Type: String
  DomainName:
    Type: String
  ClusterName:
    Type: String
  HostedZone:
    Type: String
  ServiceName:
    Type: String
  Version:
    Type: String
  Subnets:
    Type: String

Resources:

  DroneS3Bucket:
    Type: AWS::S3::Bucket

  ALBToClusterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: A security group for clusters to consume for this ALB
      VpcId: !Ref VpcId

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Action:
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                Effect: Allow
                Resource: "*"
  IncomingWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for our kloudcover ALB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      VpcId: !Ref VpcId

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 600
      Subnets:
        Fn::Split:
          - ','
          - !Sub ${Subnets}
      SecurityGroups:
      - Fn::ImportValue:
          Fn::Sub: ${ClusterName}-cluster:ALBBadgeSg
      - !Ref IncomingWeb

  TargetGroup443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 7
      Matcher:
        HttpCode: 200-299
      HealthCheckPath: "/healthz"
      Port: 1
      Protocol: HTTP
      VpcId: !Ref VpcId

  myDNSRecord:
    DependsOn:
      - ALB
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${HostedZone}.
      Comment: DNS name for drone
      Name: !Sub ${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: Z35SXDOTRQ7X7K

  mycert:
    DependsOn:
      - myDNSRecord
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${DomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName: !Sub ${DomainName}
        ValidationDomain: !Sub ${HostedZone}

  Listener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup443
      Certificates:
        - CertificateArn: !Sub ${mycert}
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS

  ListenerRule443:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup443
      Conditions:
      - Field: host-header
        Values:
        - !Ref DomainName
      ListenerArn: !Ref Listener443
      Priority: 6

  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
          - CertificateArn: !Sub ${mycert}
      ListenerArn: !Ref Listener443

  Service:
    DependsOn:
      - ListenerRule443
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: drone-server
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup443
      Role: !GetAtt ServiceRole.Arn
      PlacementStrategies:
        - Type: spread
          Field: instanceId
      TaskDefinition: !Ref Task

  Logs:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub ${ServiceName}
      RetentionInDays: 7

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: drone-server
          Cpu: 20
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/drone:server-${Version}
          MemoryReservation: 128
          Environment:
            - Name: DRONE_OPEN
              Value: true
            - Name: DRONE_ADMIN
              Value: ktruckenmiller
            - Name: DRONE_REPOSITORY_FILTER
              Value: ktruckenmiller
            - Name: AWS_REGION
              Value: !Sub ${AWS::Region}
            - Name: AWS_DEFAULT_REGION
              Value: !Sub ${AWS::Region}
            - Name: DRONE_S3_BUCKET
              Value: !Ref DroneS3Bucket
            - Name: DRONE_SERVER_HOST
              Value: !Ref DomainName
          PortMappings:
            - ContainerPort: 80
          # MountPoints:
          #   - SourceVolume: 'drone'
          #     ContainerPath: '/var/lib/drone'
          #     ReadOnly: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${ServiceName}
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub ${ServiceName}
        - Name: !Sub ${ServiceName}-agent
          Cpu: 40
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/drone:agent-${Version}
          MemoryReservation: 128
          Environment:
            - Name: DRONE_RUNNER_CAPACITY
              Value: 2
            - Name: DRONE_RPC_SERVER
              Value: !Sub https://${DomainName}
            - Name: AWS_DEFAULT_REGION
              Value: !Sub ${AWS::Region}
            - Name: AWS_REGION
              Value: !Sub ${AWS::Region}
          Links:
            - "drone-server:drone-server"
          MountPoints:
            - SourceVolume: 'docker-sock'
              ContainerPath: '/var/run/docker.sock'
              ReadOnly: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${ServiceName}
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub ${ServiceName}-agent
      Volumes:
        # - Name: drone
        #   Host:
        #     SourcePath: '/efs/drone'
        - Name: docker-sock
          Host:
            SourcePath: '/var/run/docker.sock'
      TaskRoleArn: !Ref TaskRole

  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "sts:AssumeRole"
      Path: '/'
      Policies:
        - PolicyName: "ssm"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'ssm:*'
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/drone/*"
              - Effect: "Allow"
                Action:
                  - s3:*
                Resource:
                  - Fn::Sub:
                      - ${Arn}
                      - {Arn: !GetAtt DroneS3Bucket.Arn}
                  - Fn::Sub:
                      - ${Arn}/*
                      - {Arn: !GetAtt DroneS3Bucket.Arn}
